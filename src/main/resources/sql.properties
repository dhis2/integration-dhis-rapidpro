success.log.insert.h2=INSERT INTO SUCCESS_LOG (dhis_request, dhis_response, rapidpro_payload, data_set_code, report_period_offset, organisation_unit_id) VALUES (:?dhisRequest, :?dhisResponse, :?rapidProPayload, :?dataSetCode, :?reportPeriodOffset, :?orgUnitId)
retry.dlc.select.h2=SELECT * FROM DEAD_LETTER_CHANNEL WHERE status = 'RETRY' LIMIT 100
error.dlc.insert.h2=INSERT INTO DEAD_LETTER_CHANNEL (payload, data_set_code, report_period_offset, organisation_unit_id, status, error_message) VALUES (:?payload, :?dataSetCode, :?reportPeriodOffset, :?orgUnitId, 'ERROR', :?errorMessage)
processed.dlc.update.h2=UPDATE DEAD_LETTER_CHANNEL SET status = 'PROCESSED', last_processed_at = CURRENT_TIMESTAMP WHERE id = :?id
last.run.select.h2=SELECT * FROM POLLER WHERE flow_uuid = :?flowUuid
last.run.upsert.h2=MERGE INTO POLLER (flow_uuid, last_run_at) VALUES (:?flowUuid, :?newLastRunAt)
retry.flow.select.h2=SELECT * FROM FLOW_RUN WHERE status = 'RETRY' LIMIT 100
processed.flow.update.h2=UPDATE FLOW_RUN SET status = 'PROCESSED', last_processed_at = CURRENT_TIMESTAMP WHERE id = :?id
retry.flow.insert.h2=INSERT INTO FLOW_RUN (payload, status) VALUES (:?payload, 'RETRY')

success.log.insert.postgresql=INSERT INTO SUCCESS_LOG (dhis_request, dhis_response, rapidpro_payload, data_set_code, report_period_offset, organisation_unit_id) VALUES (:?dhisRequest, :?dhisResponse, :?rapidProPayload, :?dataSetCode, :?reportPeriodOffset, :?orgUnitId)
retry.dlc.select.postgresql=SELECT * FROM DEAD_LETTER_CHANNEL WHERE status = 'RETRY' LIMIT 100
error.dlc.insert.postgresql=INSERT INTO DEAD_LETTER_CHANNEL (payload, data_set_code, report_period_offset, organisation_unit_id, status, error_message) VALUES (:?payload, :?dataSetCode, :?reportPeriodOffset, :?orgUnitId, 'ERROR', :?errorMessage)
processed.dlc.update.postgresql=UPDATE DEAD_LETTER_CHANNEL SET status = 'PROCESSED', last_processed_at = CURRENT_TIMESTAMP WHERE id = :?id
last.run.select.postgresql=SELECT * FROM POLLER WHERE flow_uuid = :?flowUuid
last.run.upsert.postgresql=INSERT INTO POLLER (flow_uuid, last_run_at) VALUES (:?flowUuid, :?newLastRunAt) ON CONFLICT (flow_uuid) DO UPDATE SET last_run_at = :?newLastRunAt
retry.flow.select.postgresql=SELECT * FROM FLOW_RUN WHERE status = 'RETRY' LIMIT 100
processed.flow.update.postgresql=UPDATE FLOW_RUN SET status = 'PROCESSED', last_processed_at = CURRENT_TIMESTAMP WHERE id = :?id
retry.flow.insert.postgresql=INSERT INTO FLOW_RUN (payload, status) VALUES (:?payload, 'RETRY')
